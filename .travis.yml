sudo: false

language: cpp

addons: &addons
  apt:
    packages: timeout
    sources: &sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise-3.5
      - llvm-toolchain-precise-3.6
      - llvm-toolchain-precise-3.7
      - llvm-toolchain-precise-3.8
      - llvm-toolchain-precise

cache:
  apt: true
  ccache: true
  directories:
    - $HOME/.ccache
    - $LLVM_BUILD_DEPS

env:
  global:
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=500M
    - CCACHE_CPP2=1

# Do not build our sync branch.
branches:
  only:
    - master

matrix:
  # Abort all builds on a single failing matrix entry.
  fast_finish: true

  exclude:
    # Exclude default job, the dependencies have to be managed for each.
    - os: osx
    - os: linux

  include:
    - os: linux
      env: COMPILER=clang++-3.7 CCOMPILER=clang-3.7
      addons:
        apt:
          sources: *sources
          packages: ['clang-3.7', 'libstdc++-5-dev']
      compiler: clang-3.7

    - os: linux
      env: COMPILER=clang++-3.8 CCOMPILER=clang-3.8
      addons:
        apt:
          sources: *sources
          packages: ['clang-3.8', 'libstdc++-6-dev']
      compiler: clang-3.8

    - os: osx
      env: COMPILER=g++-6 CCOMPILER=gcc-6
      osx_image: xcode7.3
      compiler: g++-6

    - os: linux
      env: DIST=pangolin COMPILER=g++-4.8 CCOMPILER=gcc-4.8
      addons:
        apt:
          sources: *sources
          packages: g++-4.8
      compiler: gcc-4.8

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode6.4
      compiler: clang

    - os: linux
      env: COMPILER=g++-5 CCOMPILER=gcc-5
      addons:
        apt:
          sources: *sources
          packages: g++-5
      compiler: gcc-5

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.3
      compiler: clang

    - os: linux
      env: COMPILER=g++-6 CCOMPILER=gcc-6
      addons:
        apt:
          sources: *sources
          packages: g++-6
      compiler: gcc-6

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode8.3
      compiler: clang

# Get a recent version of CMake and timeout on OS X.
install:
- |
  LLVM_USER_ROOT=`dirname $TRAVIS_BUILD_DIR`
  export LLVM_BUILD_DEPS="$LLVM_USER_ROOT/deps"
  export LLVM_LOCAL_BIN="$LLVM_USER_ROOT/bin"
  if [ $TRAVIS_OS_NAME == 'linux' ]; then
    CMAKE_URL="https://cmake.org/files/v3.8/cmake-3.8.0-Linux-x86_64.tar.gz"
    export CMAKE=$LLVM_BUILD_DEPS/cmake/bin/cmake
    export GOROOT=/usr/lib/go
    export GOBIN=/usr/bin/go
  elif [ $TRAVIS_OS_NAME == 'osx' ] ; then
    brew install ccache python coreutils
    # GCC on OS X
    if [[ "$COMPILER" == g++-* ]]; then
      brew install "gcc${COMPILER##*++-}"
      export CXXFLAGS="-D__builtin_unreachable=__builtin_trap"
      export CFLAGS="-D__builtin_unreachable=__builtin_trap"
    fi
    CMAKE_URL="https://cmake.org/files/v3.8/cmake-3.8.0-Darwin-x86_64.tar.gz"
    export CMAKE=$LLVM_BUILD_DEPS/cmake/CMake.app/Contents/bin/cmake
    PATH="$PATH:/usr/local/opt/ccache/libexec:/usr/local/opt/coreutils/libexec/gnubin"
  fi

  if [ ! -f $CMAKE ]; then
    mkdir -pv $LLVM_BUILD_DEPS/cmake
    travis_retry curl -k $CMAKE_URL | tar --strip-components=1 -xz -C $LLVM_BUILD_DEPS/cmake
  fi

before_script:
 - $CMAKE --version
 - export CXX="ccache $COMPILER"
 - export CC="ccache $CCOMPILER"

script:
- |
  mkdir build && cd build
  $CMAKE ../ -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_BUILD_TYPE=Release
  timeout -s SIGTERM 40m make -j4 check-llvm
